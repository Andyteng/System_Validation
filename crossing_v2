sort
 	% Multi-Objects
	SSensor 	= struct S1_e | S1_w | S2_e | S2_w;		% Side train detector sensors
	StopSign = struct ST1_e | ST1_w | ST2_e | ST1_train | ST2_train;  
	MSensor 	= struct S1_trian | S2_train;	% Center train detector sensors
	Light   	= struct L1 | L2;
	Barrier 	= struct B1 | B2;
	Track  	= struct T1 | T2;
 	
	
	% States
	State 		= struct ON | OFF;	% Lights, Bell
	TrState   	= struct FREE | BUSY;      % track
	SigState 	= struct YES | NO; 	% bell_sig, bell_status, barrier_sig, barrier_status (signal state)
	barState 	= struct OPEN | CLOSE;	% Barriers 
	sensorState	= struct DETECTED | UNDETECTED; % Sensors 
	
	% Current action state
	Changing = struct CHANGING | STATIC;
 
act 

	% External interactions
	% action
	Barriers	: Barrier # barState;
	Lights	: Light 	 # State;
	Bell	: State;
	
	%Sensors
	%sense_train	: SSensor # sensorState;
	S1_e : sensorState;
	S1_w : sensorState;
	S2_e : sensorState;
	S2_w : sensorState;
	setSSensor	: SSensor # sensorState;
	setMSensor	: MSensor # sensorState;
	
 
 	%Internal interactions
	%actions 
 	bell_sig: SigState;
 	bell_status: SigState;
 	barrier_sig: SigState;
 	barrier_status: SigState;
	setTrState: Track # TrState;

	%comm
	lights_sig_s: SigState;
	lights_sig_r: SigState;
	lights_sig: SigState;	

%map
%var S1_e, S1_w;

%eqn 
proc 
	%SideSensor (s: SSensor, state: State, c: Changing) = 
		% train is detected, start changing
		%(state == ON) -> setSSensor(s, OFF).SideSensor(c = CHANGING)
		% receive confirmation, do stuff
		%+ ((state == ON) && (c == CHANGING)) -> 
	%StopSign (s: SafeSign, state: State, c: Changing) = 
		% receive command, start changing
		%(state == OFF) -> setSafeSign(s, ON) . StopSign

	Signal_Controller(st1_e, st1_w, st2_e, st2_w: sensorState, st1_train,st2_train: MSensor, Track1, Track2: TrState) = 
		% train is detected, start changing
		%(state == ON) -> lights_sig_s(ON).Signal_Controller(c = CHANGING)
		% receive confirmation, do stuff
		  (Track1 == FREE && Track2 == FREE) -> lights_sig_s(ON).Signal_Controller() <> lights_sig_s(OFF) . Signal_Controller()
		% Situation on Track 1, Train comes from east
		+ (st1_e == DETECTED) -> Signal_Controller(Track1 = BUSY)
		+ ((Track1 == BUSY) && (st1_w == DETECTED) && (st1_e == UNDETECTED)) -> Signal_Controller(Track1 = FREE)
		% Situation on Track 1, Train comes from west
		+ (st1_w == DETECTED) -> Signal_Controller(Track1 = BUSY)
		+ ((Track1 == BUSY) && (st1_e == DETECTED) && (st1_w == UNDETECTED)) -> Signal_Controller(Track1 = FREE)
		% Situation on Track 2, Train comes from east
		+ (st2_e == DETECTED) -> Signal_Controller(Track2 = BUSY)
		+ ((Track2 == BUSY) && (st2_w == DETECTED) && (st2_e == UNDETECTED)) -> Signal_Controller(Track2 = FREE)
		% Situation on Track 2, Train comes from west
		+ (st2_w == DETECTED) -> Signal_Controller(Track2 = BUSY)
		+ ((Track2 == BUSY) && (st2_e == DETECTED) && (st2_w == UNDETECTED)) -> Signal_Controller(Track2 = FREE)
		
		+ sum i: sensorState . S1_e(i) . Signal_Controller(st1_e = i)
		+ sum i: sensorState . S1_w(i) . Signal_Controller(st1_w = i)
		+ sum i: sensorState . S2_e(i) . Signal_Controller(st2_e = i)
		+ sum i: sensorState . S2_w(i) . Signal_Controller(st2_w = i)
	;
		
 	Light_Controller(ls_sig: SigState, bl_sig: SigState) = 
		(ls_sig == ON || bl_sig == ON) -> Lights(ON).bell_sig(ON).Light_Controller()
		+ sum i: Status . lights_sig_r(i) . Light_Controller(i, bl_sig)
		+ sum i: Status . bell_status(i) . Light_Controller(ls_sig, i)
	;
	
	
 %Bell_Controller(bl_sig: Bool, br_sig: Bool, )
 %Barrier_Controller

%sum safe = (S1_e == ON) -> 


init 

	allow (
		{lights_sig, bell_sig, Barriers, Lights,  Bell, S1_e},
	comm (
	{lights_sig_s|lights_sig_r -> lights_sig},
	Signal_Controller(false,false,false,false,false,false) || Light_Controller(OFF, OFF)

));


	
