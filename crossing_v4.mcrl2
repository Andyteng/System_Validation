sort
 	% Multi-Objects
	SSensor 	= struct S1_e | S1_w | S2_e | S2_w;		% Side train detector sensors
	StopSign = struct ST1_e | ST1_w | ST2_e | ST1_train | ST2_train;  
	MSensor 	= struct S1_trian | S2_train;	% Center train detector sensors
	Light   	= struct L1 | L2;
	Barrier 	= struct B1 | B2;
	Track  	= struct T1 | T2;
	
	% States
	State 		= struct ON | OFF;	% Lights, Bell
	TrState   	= struct FREE | BUSY;      % track
	SigState 	= struct SEND | NOTSEND; 	% bell_sig, bell_status, barrier_sig, barrier_status (signal state)
	barState 	= struct OPEN | CLOSE;	% Barriers 
	sensorState	= struct DETECTED | UNDETECTED; % Sensors 
	
	% Current action state
	Changing = struct CHANGING | STATIC;

map	%Track is safe
	isFree: TrState # TrState -> Bool;
	
eqn
	isFree (FREE, FREE) = true; 
	isFree (BUSY, FREE) = false;
	isFree (FREE, BUSY) = false;
	isFree (BUSY, BUSY) = false; 
act 

	% External interactions
	% action
	Barriers	: Barrier # barState;
	Lights	: Bool;
	Bell	: Bool;
	
	%sensors
	S1_e : sensorState;
	S1_w : sensorState;
	S2_e : sensorState;
	S2_w : sensorState;
	S1_train: sensorState;
	S2_train: sensorState;
	setSSensor	: SSensor # sensorState;
	setMSensor	: MSensor # sensorState;
	
 
 	%Internal interactions
	%actions 
 	barrier_status: SigState;
	setTrState: Track # TrState;

	%comm
	lights_sig_s: barState;
	lights_sig_r: barState;
	lights_sig: barState;

	bell_status_s: Bool;
	bell_status_r: Bool;
	bell_status: Bool;

	bell_sig_s: Bool;
	bell_sig_r: Bool;
	bell_sig: Bool;

	barrier_sig_s: Bool;
	barrier_sig_r: Bool;
	barrier_sig: Bool;
	
	barrier_status_s: Bool;
	barrier_status_r: Bool;
	barrier_status: Bool;

	
		

proc 

	Signal_Controller(st1_e, st1_w, st2_e, st2_w: sensorState, st1_train, st2_train: sensorState, state: barState) = 
		
		% System is BUSY
		(st1_e == DETECTED || st1_w == DETECTED || st2_e == DETECTED || st2_w == DETECTED) ->
		%System is busy
		((state == OPEN) ->
		%send a close signal and set state to close
		lights_sig_s(CLOSE).Signal_Controller(state = CLOSE))
		
		%%System is FREE unless there is no train on both crossing
		<> (state == CLOSE) ->
		% send a open signal and set state to open
		lights_sig_s(OPEN).Signal_Controller(state = OPEN)

		%Sensors
		+ sum i: sensorState . (st1_e != i) -> S1_e(i) . Signal_Controller(st1_e = i)
		+ sum i: sensorState . (st1_w != i) -> S1_w(i) . Signal_Controller(st1_w = i)
		+ sum i: sensorState . (st2_e != i) -> S2_e(i) . Signal_Controller(st2_e = i)
		+ sum i: sensorState . (st2_w != i) -> S2_w(i) . Signal_Controller(st2_w = i)

;

	

Light_Controller(ls_sig: barState, bl_sig: Bool, bl_status: Bool, ls_on: Bool) = 
	
	(ls_sig == CLOSE || bl_status == true) ->
		





	% If receives signal from Signal controller to close, bell signal is true and Lights are on:
	(ls_sig == OPEN) -> lights_sig_r(CLOSE) . bell_sig_s(true) . Lights(true) . Light_Controller(ls_sig = CLOSE, bl_sig = true, ls_on = true)
	
	% If receives signal from Signal controller to open, bell signal is false and Lights wait for Bell status before they go off	
	+ (ls_sig == CLOSE) -> lights_sig_r(OPEN) . bell_sig_s(false) . (bl_status == true) ->
		Lights(true) . Light_Controller(ls_sig = OPEN, bl_sig = false, ls_on = true)
		<>
		Lights(false) . Light_Controller(ls_sig = OPEN, bl_sig = false, ls_on = false)
	
	% If Bell status changes: turn Lights On or Off (depending on ls_sig) 
	+ sum i:Bool . bell_status_r(i) . (ls_sig == OPEN) -> 
		Lights(i) . Light_Controller(bl_status = i, ls_on = i)
		<>
		Lights(true) . Light_Controller(bl_status = i, ls_on = true)
;
	
	
Bell_Controller(bl_sig: Bool, br_sig: Bool, br_status: Bool, bl_on: Bool) = 

	% If receives signal from Light controller to close, barrier signal is true and Bell is on:
	(bl_sig == false) -> bell_sig_r(true) . barrier_sig_s(true) . Bell(true) . Bell_Controller(bl_sig = true, br_sig = true, bl_on = true)
		
	% If receives signal from Light controller to open, Barrier signal is false and Bell waits for Barrier status before it goes off	
	+ (bl_sig == true) -> bell_sig_r(false) . barrier_sig_s(false) . (br_status) ->
		Bell(true) . Bell_Controller(bl_sig = false, br_sig = false, bl_on = true)
		<>
		Bell(false) . Bell_Controller(bl_sig = false, br_sig = false, bl_on = false)

	% If Barrier status changes: turn Bell On or Off (depending on bl_sig) 
	+ sum i:Bool . barrier_status_r(i) . (bl_sig == true) -> 
		Bell(i) . Bell_Controller(br_status = i, bl_on = i)
		<>
		Bell(true) . Bell_Controller(br_status = i, bl_on = true)

 %Barrier_Controller

%sum safe = (S1_e == ON) -> 
;

init 

	allow (
		{lights_sig, S1_w, S1_e, S2_w, S2_e, Lights, setTrState, barrier_sig, barrier_status, bell_sig, bell_status},
	comm (
	{lights_sig_s|lights_sig_r -> lights_sig, 
	bell_sig_s|bell_sig_r -> bell_sig,
	bell_status_s|bell_status_r -> bell_status, 
	barrier_status_s|barrier_status_r -> barrier_status,
	barrier_sig_s|barrier_sig_r -> barrier_sig
	},
	Signal_Controller(UNDETECTED, UNDETECTED, UNDETECTED, UNDETECTED, UNDETECTED, UNDETECTED, OPEN) 
	|| Light_Controller(OPEN, false, false,false)
	|| Bell_Controller(false, false, false,false)

));


	
