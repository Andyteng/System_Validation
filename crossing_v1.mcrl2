sort
 Position = struct OPEN | CLOSE;
 Status = struct ON | OFF;
 
act 

 %External interactions
 Barriers: Position;
 Lights: Status;
 Bell: Status;
 S1_e: Bool;
 S1_w: Bool;
 S2_e: Bool;
 S2_w: Bool;
 S1_train: Bool;
 S2_train: Bool;
 
 %Internal interactions

 bell_sig: Status;
 bell_status: Status;
 barrier_sig: Position;
 barrier_status: Position;

%comm
lights_sig_s: Status;
lights_sig_r: Status;
lights_sig: Status;

%map
%var S1_e, S1_w;

%eqn 
proc 
 Signal_Controller(st1_e: Bool,st1_w: Bool, st2_e: Bool, st2_w: Bool, st1_train: Bool, st2_train: Bool) = 
	(st1_e == true || st1_w == true || st2_e == true || st2_w == true) -> lights_sig_s(ON).Signal_Controller()
	+ sum i: Bool . S1_e(i) . Signal_Controller(i, st1_w, st2_e, st2_w, st1_train, st2_train)
	+ sum i: Bool . S1_w(i) . Signal_Controller(st1_e, i, st2_e, st2_w, st1_train, st2_train)
	+ sum i: Bool . S2_e(i) . Signal_Controller(st1_e, st1_w, i, st2_w, st1_train, st2_train)
	+ sum i: Bool . S2_w(i) . Signal_Controller(st1_e, st1_w, st2_e, i, st1_train, st2_train)
;

 Light_Controller(ls_sig: Status, bl_sig: Status, state: ) = 
	(ls_sig == ON || bl_sig == ON) -> Lights(ON).bell_sig(ON).Light_Controller()
	+ lights_sig_r(i) . Light_Controller(i, bl_sig)
	+ sum i: Status . bell_status(i) . Light_Controller(ls_sig, i)
;
	
	
 %Bell_Controller(bl_sig: Bool, br_sig: Bool, )
 %Barrier_Controller

%sum safe = (S1_e == ON) -> 


init 

	allow (
		{lights_sig, bell_sig, Barriers, Lights,  Bell, S1_e},
	comm (
	{lights_sig_s|lights_sig_r -> lights_sig},
	Signal_Controller(false,false,false,false,false,false) || Light_Controller(OFF, OFF)

));


	
